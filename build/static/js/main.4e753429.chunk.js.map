{"version":3,"sources":["pages/NotFound/index.tsx","shared/utils/converters.ts","components/WeatherReport/WeatherAnimation.tsx","components/WeatherReport/Temperature.tsx","shared/utils/mappers.ts","components/Icon.tsx","components/WeatherReport/WeatherIconText.tsx","components/WeatherReport/WeatherReportSummary.tsx","components/WeatherReport/index.tsx","components/Button.tsx","components/TextInput.tsx","components/SearchBar.tsx","components/Loader.tsx","components/ErrorMessage.tsx","shared/state/action-types/weather.ts","shared/state/action-creators/weather.ts","pages/Home/index.tsx","router/index.tsx","App.tsx","shared/state/reducers/weather.ts","shared/state/reducers/root.ts","api/api-client.ts","api/weather.ts","shared/cache-manager.ts","shared/geolocation.ts","shared/state/sagas/weather.ts","shared/state/sagas/root.ts","shared/state/store.ts","index.tsx"],"names":["NotFound","to","roundOffValue","valueToRoundOff","Math","round","WeatherAnimationType","temperatureCss","css","margin","fontSize","borderTopColor","fontFamily","Temperature","props","value","containerCss","display","justifyContent","alignItems","flexDirection","WeatherAnimation","color","type","size","resizeClear","className","temperature","defaultProps","SkyconsType","CLEAR_DAY","CLOUDY","WIND","RAIN","SLEET","SNOW","FOG","React","memo","mapWeatherBgColor","mapWindIcon","windSpeed","iconCss","Icon","name","valueCss","marginLeft","gap","unitCss","WeatherIconText","unit","icon","label","mainContainerCss","marginTop","windAndHumidityContainerCss","borderTop","minWidth","date","Date","day","getDate","month","getMonth","year","getFullYear","WeatherReportSummary","humidity","pressure","windSpeedInKMH","cityNameCss","marginBottom","WeatherReport","weatherData","toUpperCase","weather","main","temp","wind","speed","buttonCss","paddingTop","paddingBottom","border","borderColor","borderRadius","boxShadow","cursor","Button","disabled","text","onClick","textInputCss","TextInput","placeholder","onChange","searchBarCss","searchBarMediaQuery","searchButtonCss","SearchBar","searchText","onSearchTextChange","buttonText","onButtonClick","loaderContainerCss","rotate360","keyframes","loaderCss","animation","transform","borderLeft","background","width","height","Loader","containerClassName","isLoading","ErrorMessage","error","prefix","GET_WEATHER_DATA","GET_WEATHER_DATA_SUCCESS","GET_WEATHER_DATA_FAILURE","getWeatherDataSuccess","payload","getWeatherDataFailure","overflowY","Home","useState","setSearchText","location","useLocation","history","useHistory","useSelector","state","data","dispatch","useDispatch","useEffect","city","URLSearchParams","search","get","getWeatherData","e","target","push","Router","exact","path","component","appCss","textAlign","position","padding","top","left","App","INITIAL_STATE","weatherReducer","action","rootReducer","combineReducers","apiClient","axios","create","baseURL","process","params","appid","getWeatherDataUsingCityName","a","queryParams","response","success","status","getWeatherDataUsingLatAndLong","latitude","longitude","cacheManager","saveData","key","localStorage","setItem","toLowerCase","loadData","cachedData","getItem","removeData","delay","setTimeout","removeItem","geolocation","getCurrentLocation","Promise","resolve","reject","navigator","getCurrentPosition","coords","getLocationCoordinates","handleWeatherAPIResponse","getCurrentLocationWeatherData","handleGettingWeatherData","weatherWatcherSaga","call","put","JSON","stringify","parse","takeLatest","rootSaga","all","weatherSaga","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e753429.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\n\nfunction NotFound() {\n  return (\n    <div>\n      <h1>404 - Not Found</h1>\n      <h3>The page you're looking for doesn't exist.</h3>\n      <Link to=\"/\">Go To Home Page</Link>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/** Converts meter per second value into kilometer per hour */\nexport function convertMPSToKMH(valueToConvert: number) {\n  return valueToConvert * 3.6;\n}\n\n/** Returns the rounded off value. */\nexport function roundOffValue(valueToRoundOff: number) {\n  return Math.round(valueToRoundOff);\n}\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport Skycons, { SkyconsType } from 'react-skycons';\nimport Temperature from '@components/WeatherReport/Temperature';\nimport { css } from '@emotion/react';\n\ninterface WeatherAnimationProps {\n  color: string;\n  type: any;\n  size: number;\n  resizeClear?: boolean;\n  className?: string;\n  temperature: number;\n}\n\nconst containerCss = css({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexDirection: 'column',\n});\n\nconst WeatherAnimation = (props: WeatherAnimationProps) => {\n  const { color, type, size, resizeClear, className, temperature } = props;\n\n  return (\n    <div css={containerCss}>\n      <Skycons\n        className={className}\n        color={color}\n        type={type}\n        size={size}\n        resizeClear={resizeClear}\n      />\n      <Temperature value={temperature} />\n    </div>\n  );\n};\n\nWeatherAnimation.defaultProps = {\n  className: '',\n  resizeClear: true,\n};\n\nexport enum WeatherAnimationType {\n  Clear = SkyconsType.CLEAR_DAY,\n  Clouds = SkyconsType.CLOUDY,\n  Tornado = SkyconsType.WIND,\n  Thunderstorm = SkyconsType.RAIN,\n  Rain = SkyconsType.RAIN,\n  Drizzle = SkyconsType.SLEET,\n  Snow = SkyconsType.SNOW,\n  Smoke = SkyconsType.FOG,\n  Haze = SkyconsType.FOG,\n  Dust = SkyconsType.FOG,\n  Fog = SkyconsType.FOG,\n}\n\nexport default React.memo(WeatherAnimation);\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { roundOffValue } from '@utils/converters';\n\ninterface TemperatureProps {\n  value: number;\n}\n\nconst temperatureCss = css({\n  margin: 0,\n  fontSize: '80px',\n  borderTopColor: 'white',\n  fontFamily: \"'Fjalla One', sans-serif\",\n});\n\nconst Temperature = (props: TemperatureProps) => {\n  const { value } = props;\n  return <h1 css={temperatureCss}>{`${roundOffValue(value)}\\u00B0`}</h1>;\n};\n\nexport default Temperature;\n","/** Maps the className based on the temperature. */\nexport function mapWeatherBgColor(temperature: number) {\n  let className = '';\n\n  if (temperature >= 35) {\n    className = 'hot';\n  } else if (temperature >= 20 && temperature < 35) {\n    className = 'warm';\n  } else if (temperature >= 5 && temperature < 20) {\n    className = 'moderate';\n  } else if (temperature < 5) {\n    className = 'cold';\n  }\n\n  return className;\n}\n\n/** Maps the className of wind icon based on the wind speed. */\nexport function mapWindIcon(windSpeed: number) {\n  let className = 'wi wi-small-craft-advisory';\n\n  if (windSpeed >= 30 && windSpeed <= 88) {\n    className = 'wi wi-gale-warning';\n  } else if (windSpeed >= 89 && windSpeed <= 102) {\n    className = 'wi wi-storm-warning';\n  } else if (windSpeed > 102) {\n    className = 'wi wi-hurricane-warning';\n  }\n\n  return className;\n}\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { css } from '@emotion/react';\n\ninterface IconProps {\n  name: string;\n}\n\nconst iconCss = css({\n  fontSize: 30,\n});\n\nconst Icon = (props: IconProps) => {\n  const { name } = props;\n  return <i className={name} css={iconCss} />;\n};\n\nexport default React.memo(Icon);\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { roundOffValue } from '@utils/converters';\nimport Icon from '@components/Icon';\n\ninterface WeatherIconTextProps {\n  value: string | number;\n  unit: string;\n  icon: string;\n  label: string;\n}\n\nconst containerCss = css({\n  display: 'flex',\n  alignItems: 'center',\n});\n\nconst valueCss = css({\n  fontSize: '36px',\n  fontFamily: \"'Fjalla One', sans-serif\",\n  marginLeft: '10px',\n  display: 'flex',\n  alignItems: 'center',\n  gap: '10px',\n});\n\nconst unitCss = css({\n  fontSize: '16px',\n});\n\nconst WeatherIconText = (props: WeatherIconTextProps) => {\n  const { value, unit, icon, label } = props;\n\n  return (\n    <div css={containerCss}>\n      <Icon name={icon} />\n      <div css={valueCss}>\n        <span css={unitCss}>{label}</span>\n        {roundOffValue(value as number)}\n        <span css={unitCss}>{unit}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherIconText;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { convertMPSToKMH } from '@utils/converters';\nimport { mapWindIcon } from '@utils/mappers';\nimport WeatherIconText from './WeatherIconText';\n\ninterface WeatherReportSummaryProps {\n  humidity: number;\n  windSpeed: number;\n  pressure: number;\n}\n\nconst mainContainerCss = css({\n  display: 'flex',\n  justifyContent: 'center',\n  marginTop: '10px',\n});\n\nconst windAndHumidityContainerCss = css({\n  borderTop: '1px solid white',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  minWidth: '200px',\n});\nconst date = new Date();\n\nconst day = date.getDate();\nconst month = date.getMonth() + 1;\nconst year = date.getFullYear();\n\nconst WeatherReportSummary = (props: WeatherReportSummaryProps) => {\n  const { humidity, windSpeed, pressure } = props;\n  const windSpeedInKMH = convertMPSToKMH(windSpeed);\n\n  return (\n    <div css={mainContainerCss}>\n      <div css={windAndHumidityContainerCss}>\n        <WeatherIconText value={humidity} unit=\"%\" icon=\"wi wi-raindrop\" label=\"Вологість:\" />\n        <WeatherIconText\n          value={windSpeedInKMH}\n          unit=\"м/с\"\n          icon={mapWindIcon(windSpeedInKMH)}\n          label=\"Вітер:\"\n        />\n        <WeatherIconText value={pressure} unit=\"г/Па\" icon=\"wi wi-alien\" label=\"Тиск:\" />\n        <span>Актуально на {`${day}.${month}.${year}`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherReportSummary;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Weather } from '@shared/interfaces/weather';\nimport WeatherAnimation, { WeatherAnimationType } from './WeatherAnimation';\nimport WeatherReportSummary from './WeatherReportSummary';\n\ninterface WeatherReportProps {\n  weatherData: Weather;\n}\n\nconst containerCss = css({\n  color: 'white',\n});\n\nconst cityNameCss = css({\n  margin: 0,\n  marginBottom: '10px',\n  fontFamily: \"'Share Tech Mono', monospace\",\n  fontSize: '2em',\n});\n\nconst WeatherReport = (props: WeatherReportProps) => {\n  const { weatherData } = props;\n\n  return (\n    weatherData && (\n      <div css={containerCss}>\n        <h1 css={cityNameCss}>{weatherData.name.toUpperCase()}</h1>\n\n        <WeatherAnimation\n          color=\"white\"\n          type={WeatherAnimationType[weatherData.weather[0].main as any]}\n          temperature={weatherData.main.temp}\n          size={220}\n        />\n\n        <WeatherReportSummary\n          humidity={weatherData.main.humidity}\n          windSpeed={weatherData.wind.speed}\n          pressure={weatherData.main.pressure}\n        />\n      </div>\n    )\n  );\n};\n\nexport default WeatherReport;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\n\ninterface ButtonProps {\n  text: string;\n  onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  className?: string;\n  disabled?: boolean;\n}\n\nconst buttonCss = css({\n  paddingTop: '8px',\n  paddingBottom: '8px',\n  border: '1px solid',\n  borderColor: 'gray',\n  borderRadius: '4px',\n  boxShadow: '0 2px 4px 0px gray',\n  cursor: 'pointer',\n  '&:disabled': {\n    cursor: 'not-allowed',\n  },\n});\n\nconst Button = (props: ButtonProps) => {\n  const { className, disabled, text, onClick } = props;\n\n  return (\n    <button\n      css={buttonCss}\n      type=\"submit\"\n      className={className}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {text}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  className: '',\n  disabled: false,\n};\n\nexport default Button;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\n\ninterface TextInputProps {\n  placeholder: string;\n  value: string;\n  disabled?: boolean;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  type?: string;\n  className?: string;\n}\n\nconst textInputCss = css({\n  paddingTop: '8px',\n  paddingBottom: '8px',\n});\n\nconst TextInput = (props: TextInputProps) => {\n  const { className, type, placeholder, value, disabled, onChange } = props;\n\n  return (\n    <input\n      className={className}\n      css={textInputCss}\n      type={type}\n      placeholder={placeholder}\n      value={value}\n      disabled={disabled}\n      onChange={onChange}\n    />\n  );\n};\n\nTextInput.defaultProps = {\n  type: 'text',\n  disabled: false,\n  className: '',\n};\n\nexport default TextInput;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport Button from './Button';\nimport TextInput from './TextInput';\n\ninterface SearchBarProps {\n  searchText: string;\n  buttonText: string;\n  placeholder: string;\n  onSearchTextChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onButtonClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  className?: string;\n}\n\nconst searchBarMediaQuery = `\n  @media only screen and (min-width: 600px) {\n    margin-bottom: 2%;\n  }\n`;\n\nconst searchBarCss = css({\n  paddingTop: '20px',\n  marginBottom: '5%',\n  searchBarMediaQuery,\n});\n\nconst searchButtonCss = css({\n  marginLeft: '10px',\n  marginTop: '4px',\n});\n\nconst SearchBar = (props: SearchBarProps) => {\n  const {\n    className,\n    searchText,\n    placeholder,\n    onSearchTextChange,\n    buttonText,\n    onButtonClick,\n  } = props;\n\n  return (\n    <div css={searchBarCss} className={className}>\n      <TextInput placeholder={placeholder} value={searchText} onChange={onSearchTextChange} />\n\n      <Button\n        text={buttonText}\n        css={searchButtonCss}\n        disabled={!searchText}\n        onClick={onButtonClick}\n      />\n    </div>\n  );\n};\n\nSearchBar.defaultProps = {\n  className: '',\n};\n\nexport default SearchBar;\n","/** @jsxImportSource @emotion/react */\nimport { css, keyframes } from '@emotion/react';\n\ninterface LoaderProps {\n  containerClassName?: string;\n  className?: string;\n  isLoading: boolean;\n}\n\nconst loaderContainerCss = css({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n});\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst loaderCss = css({\n  animation: `${rotate360} 1s linear infinite`,\n  transform: 'translateZ(0)',\n  border: '8px solid gray',\n  borderLeft: '8px solid skyblue',\n  background: 'transparent',\n  width: '100px',\n  height: '100px',\n  borderRadius: '50%',\n});\n\nconst Loader = (props: LoaderProps) => {\n  const { containerClassName, className, isLoading } = props;\n\n  if (!isLoading) {\n    return null;\n  }\n\n  return (\n    <div css={loaderContainerCss} className={containerClassName}>\n      <div css={loaderCss} className={className} />;\n    </div>\n  );\n};\n\nLoader.defaultProps = {\n  containerClassName: '',\n  className: '',\n};\n\nexport default Loader;\n","interface ErrorMessageProps {\n  error: any;\n}\n\n// TODO: customize error message based on the type of error\nconst ErrorMessage = (props: ErrorMessageProps) => {\n  const { error } = props;\n\n  return error && <h2>An Error Occurred. Please try again.</h2>;\n};\n\nexport default ErrorMessage;\n","const prefix = 'weather';\nexport const GET_WEATHER_DATA = `${prefix}/GET_WEATHER_DATA`;\nexport const GET_WEATHER_DATA_SUCCESS = `${prefix}/GET_WEATHER_DATA_SUCCESS`;\nexport const GET_WEATHER_DATA_FAILURE = `${prefix}/GET_WEATHER_DATA_FAILURE`;\n","import { Weather } from '@shared/interfaces/weather';\nimport {\n  GET_WEATHER_DATA,\n  GET_WEATHER_DATA_FAILURE,\n  GET_WEATHER_DATA_SUCCESS,\n} from '@state/action-types/weather';\n\nexport const getWeatherData = (city: string) => ({\n  type: GET_WEATHER_DATA,\n  payload: city,\n});\n\nexport const getWeatherDataSuccess = (payload: Weather) => ({\n  type: GET_WEATHER_DATA_SUCCESS,\n  payload,\n});\n\nexport const getWeatherDataFailure = () => ({\n  type: GET_WEATHER_DATA_FAILURE,\n});\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport WeatherReport from '@components/WeatherReport';\nimport SearchBar from '@components/SearchBar';\nimport Loader from '@components/Loader';\nimport ErrorMessage from '@components/ErrorMessage';\nimport { getWeatherData } from '@state/action-creators/weather';\nimport { mapWeatherBgColor } from '@utils/mappers';\nimport './index.css';\n\nconst containerCss = css({\n  height: '100%',\n  overflowY: 'scroll',\n});\n\nconst Home = () => {\n  const [searchText, setSearchText] = useState('');\n  const location = useLocation();\n  const history = useHistory();\n  const weatherData = useSelector((state) => (state as any).weather.data);\n  const isLoading = useSelector((state) => (state as any).weather.isLoading);\n  const error = useSelector((state) => (state as any).weather.error);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const city = params.get('city') as string;\n    dispatch(getWeatherData(city));\n  }, [location, dispatch]);\n\n  const onTextInputChange = (e: any) => {\n    setSearchText(e.target.value);\n  };\n\n  const onButtonClick = () => {\n    history.push(`?city=${searchText}`);\n  };\n\n  return (\n    <div css={containerCss} className={weatherData && mapWeatherBgColor(weatherData.main.temp)}>\n      <SearchBar\n        searchText={searchText}\n        buttonText=\"Пошук\"\n        placeholder=\"Введіть місто\"\n        onSearchTextChange={onTextInputChange}\n        onButtonClick={onButtonClick}\n      />\n      <Loader isLoading={isLoading} />\n      <ErrorMessage error={error} />\n\n      <WeatherReport weatherData={weatherData} />\n    </div>\n  );\n};\n\nexport default Home;\n","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport NotFound from '@pages/NotFound';\nimport Home from '@pages/Home';\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport Router from './router';\n\nconst appCss = css({\n  textAlign: 'center',\n  position: 'fixed',\n  padding: 0,\n  margin: 0,\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n});\n\nfunction App() {\n  return (\n    <div css={appCss}>\n      <Router />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReduxAction } from '@shared/interfaces/redux';\nimport { Weather } from '@shared/interfaces/weather';\nimport {\n  GET_WEATHER_DATA,\n  GET_WEATHER_DATA_FAILURE,\n  GET_WEATHER_DATA_SUCCESS,\n} from '@state/action-types/weather';\n\ninterface WeatherState {\n  data: Weather | null;\n  isLoading: boolean;\n  error: boolean;\n}\n\nexport const INITIAL_STATE: WeatherState = {\n  data: null,\n  isLoading: true,\n  error: false,\n};\n\nconst weatherReducer = (state: WeatherState = INITIAL_STATE, action: ReduxAction) => {\n  switch (action.type) {\n    case GET_WEATHER_DATA:\n      return { ...INITIAL_STATE };\n    case GET_WEATHER_DATA_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: false,\n        isLoading: false,\n      };\n    case GET_WEATHER_DATA_FAILURE:\n      return {\n        ...state,\n        data: null,\n        error: true,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default weatherReducer;\n","import { combineReducers } from 'redux';\nimport weather from './weather';\n\nconst rootReducer = combineReducers({ weather });\n\nexport default rootReducer;\n","import axios, { AxiosResponse } from 'axios';\n\nexport interface APIResponse<T> extends AxiosResponse<T> {\n  success: boolean;\n}\n\nexport const apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  params: {\n    appid: process.env.REACT_APP_API_KEY,\n  },\n});\n","import { apiClient } from './api-client';\n\n/** Will fetch the weather data based on the city name. */\nexport const getWeatherDataUsingCityName = async (city: string) => {\n  try {\n    const queryParams = `?q=${city}&units=metric`;\n    const response = await apiClient.get(queryParams);\n    return {\n      ...response,\n      success: response && response.status >= 200 && response.status < 300,\n    };\n  } catch (error) {\n    return error;\n  }\n};\n\n/** Will fetch the weather data based on the latitude and longitude. */\nexport const getWeatherDataUsingLatAndLong = async (latitude: number, longitude: number) => {\n  try {\n    const queryParams = `?lat=${latitude}&lon=${longitude}&units=metric`;\n    const response = await apiClient.get(queryParams);\n    return {\n      ...response,\n      success: response && response.status >= 200 && response.status < 300,\n    };\n  } catch (error) {\n    return error;\n  }\n};\n","interface CacheResponse {\n  success: boolean;\n  error?: any;\n  cachedData?: string | null;\n}\n\ninterface CacheManager {\n  saveData: (key: string, value: string) => CacheResponse;\n  loadData: (key: string) => CacheResponse;\n  removeData: (key: string, delay?: number) => CacheResponse;\n}\n\n/** Used for storing data in the cache. */\nfunction saveData(key: string, value: string): CacheResponse {\n  try {\n    localStorage.setItem(key.toLowerCase(), value);\n    return { success: true };\n  } catch (error) {\n    return { success: false, error };\n  }\n}\n\n/** Used for loading data from cache. */\nfunction loadData(key: string): CacheResponse {\n  try {\n    const cachedData = localStorage.getItem(key.toLowerCase());\n    return { cachedData, success: true };\n  } catch (error) {\n    return { success: false, error };\n  }\n}\n\n/** Used for removing data from cache. By default delays removing data by 10 minutes. */\nfunction removeData(key: string, delay = 6000000): CacheResponse {\n  try {\n    setTimeout(() => {\n      localStorage.removeItem(key.toLowerCase());\n    }, delay);\n    return { success: true };\n  } catch (error) {\n    return { success: false, error };\n  }\n}\n\nconst cacheManager: CacheManager = { saveData, loadData, removeData };\n\nexport default cacheManager;\n","interface Geolocation {\n  getCurrentLocation: () => Promise<any>;\n}\n\nconst geolocation: Geolocation = {\n  getCurrentLocation: () => {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(\n        (location) => resolve(location.coords),\n        (error) => reject(error)\n      );\n    });\n  },\n};\n\nexport default geolocation;\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport { getWeatherDataUsingCityName, getWeatherDataUsingLatAndLong } from '@api/weather';\nimport { APIResponse } from '@api/api-client';\nimport { getWeatherDataFailure, getWeatherDataSuccess } from '@state/action-creators/weather';\nimport { GET_WEATHER_DATA } from '@state/action-types/weather';\nimport cacheManager from '@shared/cache-manager';\nimport geolocation from '@shared/geolocation';\nimport { Weather } from '@shared/interfaces/weather';\nimport { ReduxAction } from '@shared/interfaces/redux';\n\n/** Gets the user's current location coordinates (latitude & longitude). */\nexport function* getLocationCoordinates() {\n  const { latitude, longitude } = yield call(geolocation.getCurrentLocation);\n  return { latitude, longitude };\n}\n\n/** Updates the data or displays an error based on the API response. */\nexport function* handleWeatherAPIResponse(response: APIResponse<Weather>) {\n  if (!response.success) {\n    yield put(getWeatherDataFailure());\n    return;\n  }\n\n  yield put(getWeatherDataSuccess(response.data));\n  yield call(cacheManager.saveData, response.data.name, JSON.stringify(response.data));\n  yield call(cacheManager.removeData, response.data.name);\n}\n\n/** Contains logic to get the current location's weather data from the API. */\nexport function* getCurrentLocationWeatherData() {\n  try {\n    const { latitude, longitude } = yield call(getLocationCoordinates);\n    const response: APIResponse<Weather> = yield call(\n      getWeatherDataUsingLatAndLong,\n      latitude,\n      longitude\n    );\n    yield call(handleWeatherAPIResponse, response);\n  } catch (e) {\n    yield put(getWeatherDataFailure());\n  }\n}\n\n/** Contains logic to get the weather data from the API or the cache. */\nexport function* handleGettingWeatherData(action: ReduxAction) {\n  if (!action.payload) {\n    yield call(getCurrentLocationWeatherData);\n    return;\n  }\n\n  const { cachedData } = yield call(cacheManager.loadData, action.payload);\n  if (cachedData) {\n    yield put(getWeatherDataSuccess(JSON.parse(cachedData)));\n    return;\n  }\n\n  const response: APIResponse<Weather> = yield call(getWeatherDataUsingCityName, action.payload);\n  yield call(handleWeatherAPIResponse, response);\n}\n\nexport default function* weatherWatcherSaga() {\n  yield takeLatest(GET_WEATHER_DATA, handleGettingWeatherData);\n}\n","import { all } from 'redux-saga/effects';\nimport weatherSaga from './weather';\n\nexport default function* rootSaga() {\n  yield all([weatherSaga()]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './reducers/root';\nimport rootSaga from './sagas/root';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './shared/state/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}